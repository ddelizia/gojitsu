// Code generated by counterfeiter. DO NOT EDIT.
package gojitsufakes

import (
	"sync"

	"github.com/ddelizia/gojitsu"
	"github.com/gorilla/mux"
)

type FakeRequestMatcher struct {
	SetupStub        func(*mux.Router) *mux.Route
	setupMutex       sync.RWMutex
	setupArgsForCall []struct {
		arg1 *mux.Router
	}
	setupReturns struct {
		result1 *mux.Route
	}
	setupReturnsOnCall map[int]struct {
		result1 *mux.Route
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestMatcher) Setup(arg1 *mux.Router) *mux.Route {
	fake.setupMutex.Lock()
	ret, specificReturn := fake.setupReturnsOnCall[len(fake.setupArgsForCall)]
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct {
		arg1 *mux.Router
	}{arg1})
	stub := fake.SetupStub
	fakeReturns := fake.setupReturns
	fake.recordInvocation("Setup", []interface{}{arg1})
	fake.setupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRequestMatcher) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeRequestMatcher) SetupCalls(stub func(*mux.Router) *mux.Route) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = stub
}

func (fake *FakeRequestMatcher) SetupArgsForCall(i int) *mux.Router {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	argsForCall := fake.setupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRequestMatcher) SetupReturns(result1 *mux.Route) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 *mux.Route
	}{result1}
}

func (fake *FakeRequestMatcher) SetupReturnsOnCall(i int, result1 *mux.Route) {
	fake.setupMutex.Lock()
	defer fake.setupMutex.Unlock()
	fake.SetupStub = nil
	if fake.setupReturnsOnCall == nil {
		fake.setupReturnsOnCall = make(map[int]struct {
			result1 *mux.Route
		})
	}
	fake.setupReturnsOnCall[i] = struct {
		result1 *mux.Route
	}{result1}
}

func (fake *FakeRequestMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gojitsu.RequestMatcher = new(FakeRequestMatcher)

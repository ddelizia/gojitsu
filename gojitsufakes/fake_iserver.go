// Code generated by counterfeiter. DO NOT EDIT.
package gojitsufakes

import (
	"sync"

	"github.com/ddelizia/gojitsu"
)

type FakeIServer struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	GetPortStub        func() int
	getPortMutex       sync.RWMutex
	getPortArgsForCall []struct {
	}
	getPortReturns struct {
		result1 int
	}
	getPortReturnsOnCall map[int]struct {
		result1 int
	}
	ServeStub        func()
	serveMutex       sync.RWMutex
	serveArgsForCall []struct {
	}
	ServeAsyncStub        func(*sync.WaitGroup)
	serveAsyncMutex       sync.RWMutex
	serveAsyncArgsForCall []struct {
		arg1 *sync.WaitGroup
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIServer) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeIServer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeIServer) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeIServer) GetPort() int {
	fake.getPortMutex.Lock()
	ret, specificReturn := fake.getPortReturnsOnCall[len(fake.getPortArgsForCall)]
	fake.getPortArgsForCall = append(fake.getPortArgsForCall, struct {
	}{})
	stub := fake.GetPortStub
	fakeReturns := fake.getPortReturns
	fake.recordInvocation("GetPort", []interface{}{})
	fake.getPortMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIServer) GetPortCallCount() int {
	fake.getPortMutex.RLock()
	defer fake.getPortMutex.RUnlock()
	return len(fake.getPortArgsForCall)
}

func (fake *FakeIServer) GetPortCalls(stub func() int) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = stub
}

func (fake *FakeIServer) GetPortReturns(result1 int) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = nil
	fake.getPortReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeIServer) GetPortReturnsOnCall(i int, result1 int) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = nil
	if fake.getPortReturnsOnCall == nil {
		fake.getPortReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getPortReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeIServer) Serve() {
	fake.serveMutex.Lock()
	fake.serveArgsForCall = append(fake.serveArgsForCall, struct {
	}{})
	stub := fake.ServeStub
	fake.recordInvocation("Serve", []interface{}{})
	fake.serveMutex.Unlock()
	if stub != nil {
		fake.ServeStub()
	}
}

func (fake *FakeIServer) ServeCallCount() int {
	fake.serveMutex.RLock()
	defer fake.serveMutex.RUnlock()
	return len(fake.serveArgsForCall)
}

func (fake *FakeIServer) ServeCalls(stub func()) {
	fake.serveMutex.Lock()
	defer fake.serveMutex.Unlock()
	fake.ServeStub = stub
}

func (fake *FakeIServer) ServeAsync(arg1 *sync.WaitGroup) {
	fake.serveAsyncMutex.Lock()
	fake.serveAsyncArgsForCall = append(fake.serveAsyncArgsForCall, struct {
		arg1 *sync.WaitGroup
	}{arg1})
	stub := fake.ServeAsyncStub
	fake.recordInvocation("ServeAsync", []interface{}{arg1})
	fake.serveAsyncMutex.Unlock()
	if stub != nil {
		fake.ServeAsyncStub(arg1)
	}
}

func (fake *FakeIServer) ServeAsyncCallCount() int {
	fake.serveAsyncMutex.RLock()
	defer fake.serveAsyncMutex.RUnlock()
	return len(fake.serveAsyncArgsForCall)
}

func (fake *FakeIServer) ServeAsyncCalls(stub func(*sync.WaitGroup)) {
	fake.serveAsyncMutex.Lock()
	defer fake.serveAsyncMutex.Unlock()
	fake.ServeAsyncStub = stub
}

func (fake *FakeIServer) ServeAsyncArgsForCall(i int) *sync.WaitGroup {
	fake.serveAsyncMutex.RLock()
	defer fake.serveAsyncMutex.RUnlock()
	argsForCall := fake.serveAsyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getPortMutex.RLock()
	defer fake.getPortMutex.RUnlock()
	fake.serveMutex.RLock()
	defer fake.serveMutex.RUnlock()
	fake.serveAsyncMutex.RLock()
	defer fake.serveAsyncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gojitsu.IServer = new(FakeIServer)
